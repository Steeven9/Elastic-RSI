version: "3.7"
services:
  # ELK stack
  elasticsearch:
    container_name: elasticsearch
    image: docker.elastic.co/elasticsearch/elasticsearch:8.2.0
    restart: always
    volumes:
      - ./esdata01:/usr/share/elasticsearch/data
      - /etc/timezone:/etc/timezone:ro
      - /etc/localtime:/etc/localtime:ro
    environment:
      - ELASTIC_PASSWORD=${ELASTIC_PASSWORD}
      - cluster.name=cluster_name
      - node.name=server_name
      - bootstrap.memory_lock=true
      - network.host=0.0.0.0
      - discovery.seed_hosts=["server_name"] # hostname
      - discovery.type=single-node
      - xpack.security.enrollment.enabled=true
      - xpack.security.http.ssl.enabled=false
      - xpack.security.transport.ssl.enabled=false
    ports:
      - 9200:9200
    ulimits:
      memlock:
        soft: -1
        hard: -1
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "curl -X GET -u elastic:${ELASTIC_PASSWORD} http://localhost:9200 || exit 1"
        ]
      interval: 10s
      timeout: 10s
      retries: 120

  kibana:
    container_name: kibana
    depends_on:
      - elasticsearch
    image: docker.elastic.co/kibana/kibana:8.2.0
    restart: always
    volumes:
      - ./kibanadata:/usr/share/kibana/data
      - /etc/timezone:/etc/timezone:ro
      - /etc/localtime:/etc/localtime:ro
    ports:
      - 5601:5601
    environment:
      - SERVERNAME=kibana
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
      - ELASTICSEARCH_USERNAME=kibana_system
      - ELASTICSEARCH_PASSWORD=${KIBANA_PASSWORD}
      - server.host=0.0.0.0
      - server.ssl.enabled=false
      # fill those with random stuff (min 32 characters)
      - XPACK_ENCRYPTEDSAVEDOBJECTS_ENCRYPTIONKEY=asasdasdaseoufghaskfihdsilhfsweiuo
      - XPACK_SECURITY_ENCRYPTIONKEY=asasdasdaseoufghaskfihdsilhfsweiu22
      - XPACK_REPORTING_ENCRYPTIONKEY=asasdasdaseoufghaskfihdsilhfsweiuoas
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "curl -s -I http://localhost:5601 | grep -q 'HTTP/1.1 302 Found'"
        ]
      interval: 10s
      timeout: 10s
      retries: 120

  # Web services
  elastic-rsi-frontend:
    container_name: elastic-rsi-frontend
    restart: always
    # builds: ./client
    image: herrdermails/usi-elastic-rsi-client
    ports:
      - "3000:3000"
    environment:
      - REACT_APP_BACKEND_HOSTNAME=elastic-rsi-backend
      - REACT_APP_BACKEND_PORT=4000
      - REACT_APP_PROD=true
    depends_on:
      - elastic-rsi-backend

  elastic-rsi-backend:
    container_name: elastic-rsi-backend
    restart: always
    # builds: ./server
    image: herrdermails/usi-elastic-rsi-server
    ports:
      - "4000:4000"
    depends_on:
      - es01
    environment:
      - REACT_APP_BACKEND_PORT=4000
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "curl -s -I http://localhost:4000/api/health | grep -q 'Ok elastic-rsi'"
        ]
      interval: 10s
      timeout: 10s
      retries: 120

networks:
  default:
    name: elastic-rsi
